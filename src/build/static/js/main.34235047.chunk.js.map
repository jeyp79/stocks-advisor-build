{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","components/CommentsList.js","components/FavoriteSection.js","components/AddNoteForm.js","pages/NotFoundPage.js","pages/StockPage.js","components/StocksList.js","pages/StocksListPage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","props","mySubmitHandler","event","preventDefault","state","symbol","setState","test","fetchData","alert","addCompany","stockSymbol","values","axios","post","toUpperCase","then","res","console","log","catch","error","name","PERatio","PEGRatio","DividendPerShare","DividendYield","EPS","RevenuePerShareTTM","ProfitMargin","QuarterlyEarningsGrowthYOY","QuarterlyRevenueGrowthYOY","AnalystTargetPrice","PriceToBookRatio","description","symbolIn","get","response","data","Name","Symbol","Description","this","info","toFixed","onSubmit","align","id","rows","cols","placeholder","onChange","target","value","type","React","Component","AboutPage","CommentsList","comments","map","comment","key","className","myText","FavoriteSection","favorite","setStockInfo","setAsDefault","a","fetch","method","result","json","body","onClick","AddCommentForm","useState","commentText","setCommentText","addComment","JSON","stringify","headers","NotFoundPage","StockPage","match","params","myNotes","stockInfo","useEffect","isItFavorite","points","Sector","Industry","AddNoteForm","StocksList","stocks","stock","to","toLowerCase","substring","StocksListPage","e","useRadioButtons","listTypeValue","listTypeInputProps","items","setItems","checked","NavBar","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.34235047.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n//Get data by stock symbol from external API, display it on the Home page\r\nclass HomePage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n        name: \"\",\r\n        symbol: \"\",\r\n        PERatio: \"\",\r\n        PEGRatio: \"\",\r\n        DividendPerShare: \"\",\r\n        DividendYield: \"\",\r\n        EPS: \"\",\r\n        RevenuePerShareTTM: \"\",\r\n        ProfitMargin: \"\",\r\n        QuarterlyEarningsGrowthYOY: \"\",\r\n        QuarterlyRevenueGrowthYOY: \"\",\r\n        AnalystTargetPrice: \"\",\r\n        PriceToBookRatio: \"\",\r\n        description: \"\",\r\n        test: \"\",\r\n    }\r\n  }\r\n\r\n  //Do on submit\r\n  mySubmitHandler = (event) => {\r\n    event.preventDefault();\r\n    \r\n    //Call data fetch if a symbol was inserted\r\n    if (this.state.symbol) {\r\n      this.setState({test: \"testPassed\"});\r\n      this.fetchData(this.state.symbol);      \r\n    } else {\r\n      alert(\"Please type a company ticker first\")\r\n    }    \r\n    this.setState({symbol: \"\"});\r\n  }\r\n\r\n  //Get data from the URL and call function to update DB\r\n  fetchData(symbolIn) {\r\n    axios.get(\"https://www.alphavantage.co/query?function=OVERVIEW&symbol=\" + symbolIn + \"&apikey=02NIDMNOYiucy81v\")\r\n    .then(response => {\r\n      console.log(response.data);\r\n      console.log(\"Data received\");\r\n      this.setState({ \r\n        name: response.data.Name, \r\n        symbol: response.data.Symbol,\r\n        PERatio: response.data.PERatio,\r\n        PEGRatio: response.data.PEGRatio,\r\n        DividendPerShare: response.data.DividendPerShare,\r\n        DividendYield: response.data.DividendYield,\r\n        EPS: response.data.EPS,\r\n        RevenuePerShareTTM: response.data.RevenuePerShareTTM,\r\n        ProfitMargin: response.data.ProfitMargin,\r\n        QuarterlyEarningsGrowthYOY: response.data.QuarterlyEarningsGrowthYOY,\r\n        QuarterlyRevenueGrowthYOY: response.data.QuarterlyRevenueGrowthYOY,\r\n        AnalystTargetPrice: response.data.AnalystTargetPrice,\r\n        PriceToBookRatio: response.data.PriceToBookRatio,\r\n        description: response.data.Description });\r\n\r\n        this.addCompany(response.data.Symbol, response.data);\r\n      })\r\n      \r\n    .catch(error => {\r\n      console.log(error);\r\n    });    \r\n  }\r\n\r\n  //Insert new company into DB or update the existed\r\n  addCompany = (stockSymbol, values) => {\r\n    axios\r\n      .post(`/api/stock/${stockSymbol.toUpperCase()}/add-stock`, values)\r\n      .then(res => {\r\n        console.log(res);\r\n        console.log(\"Inserted into DB\");\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  \r\n  render() {\r\n    const { \r\n      name, \r\n      PERatio,\r\n      PEGRatio,\r\n      DividendPerShare,\r\n      DividendYield,\r\n      EPS,\r\n      RevenuePerShareTTM,\r\n      ProfitMargin,\r\n      QuarterlyEarningsGrowthYOY,\r\n      QuarterlyRevenueGrowthYOY,\r\n      AnalystTargetPrice,\r\n      PriceToBookRatio,\r\n      description } = this.state;\r\n\r\n    //Show data when submited\r\n    let info = '';\r\n    if (this.state.test) {\r\n      info = \r\n      <div>\r\n        <p><small>The data for the company with ticker ({this.state.symbol}) will be inserted into the database</small></p>\r\n      <div>\r\n        <p>{name}</p>  \r\n        <ul>\r\n          <li>PE Ratio: {PERatio}</li>\r\n          <li>PEG Ratio: {PEGRatio}</li>\r\n          <li>Dividend Per Share: {DividendPerShare}</li>\r\n          <li>Dividend Yield: {DividendYield}</li>\r\n          <li>EPS: {EPS}</li>\r\n          <li>Revenue Per Share (TTM): {RevenuePerShareTTM}</li>\r\n          <li>ProfitMargin: {(ProfitMargin * 100).toFixed(2)}%</li>\r\n          <li>Quarterly Earnings Growth (YOY): {QuarterlyEarningsGrowthYOY}</li>\r\n          <li>Quarterly Revenue Growth (YOY): {QuarterlyRevenueGrowthYOY}</li>\r\n          <li>Analyst Target Price: {AnalystTargetPrice}</li>\r\n          <li>Price To Book Ratio: {PriceToBookRatio}</li>\r\n        </ul>        \r\n        <p>{description}</p>         \r\n      </div>\r\n    </div>;\r\n    } else {\r\n      info = '';\r\n    }\r\n    \r\n    //Symbol insert with submit button\r\n    return (\r\n      <form onSubmit={this.mySubmitHandler}>\r\n       \r\n        <h1 align=\"center\">US Stocks Investment Advisor Tool</h1>  \r\n\r\n        <div id=\"add-comment-form\">\r\n          <label>\r\n              <textarea rows=\"1\" cols=\"50\" placeholder=\"Company symbol\" onChange={(event) => this.setState({symbol: event.target.value})}  />\r\n          </label>\r\n              <button type='submit'>Get data</button>\r\n          </div>\r\n        {info}\r\n     </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;\r\n\r\n","import React from 'react';\r\n\r\nconst AboutPage = () => (\r\n    <>\r\n    <p>\r\n        <i>This WEB application, by being connected to external API data source, \r\n        allows to extract US companies fundamentals, save data to a database, \r\n        leave personal notes, mark favorite companies, \r\n        and get a list of equities, based on predefined rules.</i>\r\n    </p>\r\n    <h3>Home page</h3>\r\n    <p>\r\n        Get any US company fundamental data by stock symbol from the external data source.\r\n        Every request updates the database accordingly. \r\n    </p>\r\n    <h3>Companies</h3>\r\n    <p>\r\n    Any company that meets one of the 16 predifined conditions receives one point. \r\n    All companies in the list rated by the number of points they get.\r\n    Users favorite companies have advantage among others at the same level.\r\n    </p>\r\n    Rules:\r\n    <ul> \r\n        <li>Market Capitalization above - 2bln</li>\r\n        <li>PE Ratio - between 8 and 40</li>\r\n        <li>PEG Ratio - between 0 and 4</li>\r\n        <li>EV To Revenue - between 0 and 4</li>\r\n        <li>EPS - above 0</li>\r\n        <li>Quarterly Earnings Growth (YOY) - above 0</li>\r\n        <li>Quarterly Revenue Growth (YOY) - above 0</li>\r\n        <li>Profit Margin - equal or above 10%</li>\r\n        <li>ReturnOnAssets (TTM) - equal or above 4%</li>\r\n        <li>ReturnOnEquity (TTM) - equal or above 4%</li>\r\n        <li>Price To Sales Ratio (TTM) - between 0 and 3</li>\r\n        <li>Price To Book Ratio - between 0 and 4</li>\r\n        <li>Beta - between -2 and 2</li>\r\n        <li>Percent Insiders - between 1 and 70</li>\r\n        <li>Percent Institutions - above 5</li>\r\n        <li>PayoutRatio - below 50%</li>\r\n    </ul>\r\n    <p>Choose one from the four options available to display the list of you favorite companies, \r\n        or companies with the maximum number of points, average companies, or the whole list from the database.</p>\r\n    \r\n    <h3>Company page</h3>\r\n    <p>\r\n        Get the company main data from the database.<br></br>\r\n        The application allows to leave your personal notes and add companies into the list of favorites.\r\n        <br></br>\r\n        <br></br>\r\n    </p>\r\n    </>\r\n);\r\n\r\nexport default AboutPage;","import React from 'react';\r\n\r\nconst CommentsList = ({ comments }) => (\r\n    <>\r\n    <h3>My Notes:</h3>\r\n    {comments.map((comment, key) => (\r\n        <div className=\"comment\" key={key}>\r\n            <p>{comment.myText}</p>\r\n        </div>\r\n    ))}\r\n    </>\r\n);\r\n\r\nexport default CommentsList;","//The component allows to set a company as my favorite or not \r\nimport React from 'react';\r\n\r\nconst FavoriteSection = ({ stockSymbol, favorite, setStockInfo }) => {\r\n    const setAsDefault = async () => {\r\n        const result = await fetch(`/api/stock/${stockSymbol.toUpperCase()}/favorite`, {\r\n            method: 'post',\r\n        });\r\n        const body = await result.json();\r\n        setStockInfo(body);\r\n    }\r\n    return (\r\n        <div id=\"upvotes-section\">\r\n            <button onClick={() => setAsDefault()}>Favorite</button>\r\n            {<p>{favorite}</p>}  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FavoriteSection;","import React, { useState } from 'react';\r\n\r\n//Allows to add personal notes on company pages\r\nconst AddCommentForm = ({ stockSymbol, setStockInfo }) => {\r\n    const [commentText, setCommentText] = useState('');\r\n\r\n    const addComment = async () => {\r\n        const result = await fetch(`/api/stock/${stockSymbol.toUpperCase()}/add-comment`, {\r\n            method: 'post',\r\n            body: JSON.stringify({ myText: commentText }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        const body = await result.json();\r\n        setStockInfo(body);\r\n        setCommentText('');\r\n    }\r\n\r\n    return (\r\n        <div id=\"add-comment-form\">\r\n            <label>\r\n                <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)} />\r\n            </label>\r\n            <button onClick={() => addComment()}>Post a note</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddCommentForm;","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n    <h1>404: Page Not Found</h1>\r\n);\r\n\r\nexport default NotFoundPage;","import React, { useState, useEffect } from 'react';\r\nimport CommentsList from '../components/CommentsList';\r\nimport FavoriteSection from '../components/FavoriteSection';\r\nimport AddNoteForm from '../components/AddNoteForm';\r\nimport NotFoundPage from './NotFoundPage';\r\n\r\n//Internal company page\r\nconst StockPage = ({ match }) => {\r\n    \r\n    const symbol = match.params.symbol;\r\n\r\n    //Initialize state for stock info\r\n    const [stockInfo, setStockInfo] = useState({ favorite: -1, myNotes: [] });\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await fetch(`/api/stock/${symbol.toUpperCase()}`); \r\n            const body = await result.json();\r\n            //console.log(body);\r\n            setStockInfo(body);\r\n        }\r\n        fetchData();\r\n    }, [symbol]);\r\n\r\n    //When symbol does not exist in DB, return 404\r\n    if (!stockInfo) return <NotFoundPage/>\r\n\r\n    //Test if the company is one of my favorites\r\n    var isItFavorite = '';\r\n    if(stockInfo.favorite === 1) {\r\n        isItFavorite = '★ My Favorite';\r\n    }       \r\n         \r\n    //Output the data\r\n    return (\r\n        <>\r\n        {<h1>{stockInfo.Name} ({stockInfo.Symbol})</h1>}\r\n        <FavoriteSection stockSymbol={symbol} favorite={isItFavorite} setStockInfo={setStockInfo} />\r\n        <p>Points: {stockInfo.points}/16</p>\r\n        <ul>\r\n              <li>PE Ratio: {stockInfo.PERatio}</li>\r\n              <li>PEG Ratio: {stockInfo.PEGRatio}</li>\r\n              <li>Dividend Per Share: {stockInfo.DividendPerShare}</li>\r\n              <li>Dividend Yield: {stockInfo.DividendYield}</li>\r\n              <li>EPS: {stockInfo.EPS}</li>\r\n              <li>Revenue Per Share (TTM): {stockInfo.RevenuePerShareTTM}</li>\r\n              <li>ProfitMargin: {(stockInfo.ProfitMargin * 100).toFixed(2)}%</li>\r\n              <li>Quarterly Earnings Growth (YOY): {stockInfo.QuarterlyEarningsGrowthYOY}</li>\r\n              <li>Quarterly Revenue Growth (YOY): {stockInfo.QuarterlyRevenueGrowthYOY}</li>\r\n              <li>Analyst Target Price: {stockInfo.AnalystTargetPrice}</li>\r\n              <li>Price To Book Ratio: {stockInfo.PriceToBookRatio}</li>\r\n            </ul>  \r\n        {<p>Sector: {stockInfo.Sector}<br></br>Industry: {stockInfo.Industry}<br></br>{stockInfo.Description}</p>}\r\n        <CommentsList comments={stockInfo.myNotes} />\r\n        <AddNoteForm stockSymbol={symbol} setStockInfo={setStockInfo} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StockPage;    ","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//Stocks list output\r\nconst StocksList = ({ stocks }) => (\r\n    <>\r\n    {stocks.map((stock, key) => (\r\n        <Link className=\"stock-list-item\" key={key} to={`/stock/${stock.Symbol.toLowerCase()}`}>\r\n            <h3>{stock.Name} ({stock.Symbol})</h3>\r\n            {<p>{stock.Industry}<br></br>{stock.Description.substring(0, 150)}...</p>}\r\n        </Link>\r\n    ))}\r\n    </>\r\n);\r\n\r\nexport default StocksList;","import StocksList from '../components/StocksList';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n//Get the list of companies\r\nconst StocksListPage = () => {\r\n\r\nconst [listTypeValue, listTypeInputProps] = useRadioButtons(\"listType\");\r\n\r\nconst [items, setItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(`/api/Stocks-List/${listTypeValue}`)\r\n            .then(response => response.json())\r\n            .then(json => setItems(json))\r\n    },[listTypeValue]);\r\n\r\n    //Select a type of filter to output the list of companies\r\n    return (\r\n        <>\r\n        <p></p>\r\n        <div>\r\n            <form>\r\n                <fieldset>\r\n                    <input\r\n                        value=\"My favorites\"\r\n                        checked={listTypeValue === \"My favorites\"}\r\n                        {...listTypeInputProps}\r\n                    /> My favorites\r\n                    \r\n                    <input\r\n                        value=\"Top companies\" \r\n                        checked={listTypeValue === \"Top companies\"}\r\n                        {...listTypeInputProps}\r\n                    /> Top companies\r\n                    \r\n                    <input\r\n                        value=\"Above average\"\r\n                        checked={listTypeValue === \"Above average\"}\r\n                        {...listTypeInputProps}\r\n                    /> Above average\r\n                    \r\n                    <input\r\n                        value=\"Full list\"\r\n                        checked={listTypeValue === \"Full list\"}\r\n                        {...listTypeInputProps}\r\n                    /> Full list\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n            \r\n        <StocksList stocks={items} />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction useRadioButtons(name) {\r\n    const [value, setState] = useState(\"Top companies\");\r\n  \r\n    const handleChange = e => {\r\n      setState(e.target.value);\r\n      console.log(e.target.value)\r\n    };\r\n  \r\n    const inputProps = {\r\n      name,\r\n      type: \"radio\",\r\n      onChange: handleChange\r\n    };\r\n  \r\n    return [value, inputProps];\r\n  }\r\n\r\n\r\nexport default StocksListPage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavBar = () => (\r\n    <nav>\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/stocks-list\">Companies</Link>\r\n            </li>\r\n            <li>                \r\n                <Link to=\"/about\">About</Link>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\n\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport StockPage from './pages/StockPage';\nimport StocksListPage from './pages/StocksListPage';\nimport NotFoundPage from './pages/NotFoundPage';\n\nimport NavBar from './NavBar';\nimport './App.css';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <NavBar />\n          <div id=\"page-body\">\n          <Switch>\n            <Route path=\"/\" component={HomePage} exact />\n            <Route path=\"/about\" component={AboutPage} />\n            <Route path=\"/stock/:symbol\" component={StockPage} />\n            <Route path=\"/Stocks-List\" component={StocksListPage} />\n\n            {/* <Route path=\"/list\" component={TempList} /> */}\n\n            <Route component={NotFoundPage} />           \n\n          </Switch>\n          </div>\n        </div>       \n\n\n      </Router>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}